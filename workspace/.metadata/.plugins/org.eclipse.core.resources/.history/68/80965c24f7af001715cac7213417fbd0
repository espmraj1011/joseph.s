package com.mkyong.rest;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class DAO {
	private static CatVO[] catArr = null;
	private static ProVO[] proArr = null;
	private static UserVO[] userArr = null;
	
	
	public static CatVO[] retrieveAllCategories(){
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		CatVO tmpCat = null;
		java.util.List<CatVO> data = new ArrayList<CatVO>();
		try {
				conn = Conn.getConnection();
				stmt = conn.createStatement();
				String query = Queries.retrieveAllCategoryQuery();
				rs = stmt.executeQuery(query);
				while(rs.next()) {
					tmpCat = new CatVO();
					tmpCat.setCategoryId(rs.getInt("id"));
					tmpCat.setCategoryName(rs.getString("CategoryName"));
					tmpCat.setDescription(rs.getString("Description"));
					data.add(tmpCat);
				}
				
				catArr = data.toArray(new CatVO[data.size()]);
			}
		catch(Exception exp) {
			
	}
		finally {
			Conn.closeResources(rs, stmt, conn);
		}
		return catArr;
	}
	
	
	public static LoginVO login(UserVO loginVO) {
		LoginVO resp = new LoginVO();
		try {
			
			if(loginVO == null || loginVO.getFirstName() == null || loginVO.getPassword() == null){
				resp.setResp("Invalid User Input ");
				return resp;
			}
			
			UserVO  userDetails = retrievePasswordByUserName(loginVO.getFirstName());
			if(userDetails.getPassword() != null && userDetails.getPassword().equals(loginVO.getPassword()) ){
				resp.setResp("true");
			} else {
				resp.setResp("Invalid Username or password ");
			}
		} catch(Exception exp) {
			resp.setResp("Error. Try Again");
		} 
		
		return resp;
	}
	
	
	public static UserVO retrievePasswordByUserName(String name){
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		UserVO tmpUserDetails = new UserVO();
		try {
			conn = Conn.getConnection();
			stmt = conn.createStatement();
			String query = Queries.retrieveStoreUserByUserName(name);
			rs = stmt.executeQuery(query);
			if(rs.next()) {
				tmpUserDetails.setPassword(rs.getString("Password"));
				
			}
			
		}catch(Exception exp) {
			exp.printStackTrace();
		}finally {
			Conn.closeResources(rs, stmt, conn);
		}
		
		return tmpUserDetails;
		
	}
	
	
	public static List<UserVO> retrieveAllUsers(){
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		UserVO tmpCat = null;
		List<UserVO> data = new ArrayList<UserVO>();
		try {
				conn = Conn.getConnection();
				stmt = conn.createStatement();
				String query = Queries.retrieveAllCategoryQuery();
				rs = stmt.executeQuery(query);
				while(rs.next()) {
					tmpCat = new UserVO();
					tmpCat.setPassedOut(rs.getInt("PassedOut"));
					tmpCat.setFirstName(rs.getString("FirstName"));
					tmpCat.setLastName(rs.getString("LastName"));
					tmpCat.setDepartment(rs.getString("Department"));
					tmpCat.setDob(rs.getString("DOB"));
					tmpCat.setCompany(rs.getString("Company"));
					data.add(tmpCat);
				}
				
			}
		catch(Exception exp) {
			
	}
		finally {
			Conn.closeResources(rs, stmt, conn);
		}
		return data;
	}
	
	public static String createUser(UserVO obj){
		Connection conn = null;
		Statement stmt = null;
		int rs = 0;
		try {
				conn = Conn.getConnection();
				stmt = conn.createStatement();
				String query = Queries.createUserQuery(obj);
				rs = stmt.executeUpdate(query);
				System.out.println(query);
				
			}
		catch(Exception exp) {
			exp.printStackTrace();
			}
		finally {
			Conn.closeResources(null, stmt, conn);
		}
		return null;
	}

	public static ProVO[] retrieveAllProduct(){
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		ProVO tmpPro = null;
		java.util.List<ProVO> data = new ArrayList<ProVO>();
		try {
				conn = Conn.getConnection();
				stmt = conn.createStatement();
				String query = Queries.retrieveAllCategoryQuery();
				rs = stmt.executeQuery(query);
				while(rs.next()) {
					tmpPro = new ProVO();
					tmpPro.setProductId(rs.getInt("ProductId"));
					tmpPro.setProductName(rs.getString("ProductName"));
					tmpPro.setSupplierId(rs.getInt("SupplierId"));
					tmpPro.setCategoryId(rs.getInt("CategoryId"));
					tmpPro.setUnit(rs.getString("Unit"));
					tmpPro.setPrice(rs.getFloat("Price"));
					data.add(tmpPro);
				}
				
				proArr = data.toArray(new ProVO[data.size()]);
			}
		catch(Exception exp) {
			
	}
		finally {
			Conn.closeResources(rs, stmt, conn);
		}
		return proArr;
	}
	
}
